* org-mode emacs Config

- Most of this configuraion has been adapted from Mike Zamansky's youtube video series:
[[https://www.youtube.com/watch?v%3DEX9PKK3EMaw&index%3D10&list%3DPL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg][https://www.youtube.com/watch?v=EX9PKK3EMaw&index=10&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg]]

** Code Block Basics
~C-c C-c~ - to run
~C-c '~ to edit

~C-c C-, s~ -> to insert new code block (replaces <s-TAB)

* Basic Set-up

#+BEGIN_SRC emacs-lisp

(setq user-full-name "R. Adam Cottrill"
                          user-mail-address "racottrill@gmail.com")

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; always remove trailing whitespaces
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-to-list 'default-frame-alist  '(font . "DejaVu Sans Mono-11"))


  ;; show column number by default:
  (setq column-number-mode t)
  ;; always highlight matching parenthesis
  (show-paren-mode 1)

  ;; NO TABS!
  (setq-default indent-tabs-mode nil)

  ;; Set the default screen split to be side-by-side
  (setq display-buffer-prefer-horizontal-split t)

  ;; use string rectangle for indentng blocks/regions of code
  (global-set-key (kbd "C->") 'string-insert-rectangle)

  ;; start full screen
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; high-light the current line:
  (global-hl-line-mode t)

  ;; a compliment to C-k
  (defun kill-start-of-line ()
    "kill from point to start of line"
    (interactive)
    (kill-line 0))
  (define-key global-map "\M-k" 'kill-start-of-line)

  ;; autosave to C:\1work\ScrapBook\emacs\ instead of wherever we're working.
  (defvar user-temporary-file-directory
    "~/emacs_backup/")
  (make-directory user-temporary-file-directory t)
  (setq backup-by-copying t)
  (setq backup-directory-alist
        `(("." . ,user-temporary-file-directory)
          (,tramp-file-name-regexp nil)))
  (setq auto-save-list-file-prefix
        (concat user-temporary-file-directory ".auto-saves-"))
  (setq auto-save-file-name-transforms
        `((".*" ,user-temporary-file-directory t)))


  ;; added March 17 2012.
  ;; copy path of current buffer to kill ring
  ;; from:http://stackoverflow.com/questions/3669511/the-function-to-show-current-files-full-path-in-mini-buffer
  (defun copy-full-path-to-kill-ring ()
    "copy buffer's full path to kill ring"
    (interactive)
    (when buffer-file-name
      (kill-new (file-truename buffer-file-name))))

  (global-set-key  "\C-cz" 'copy-full-path-to-kill-ring)


;; Save whatever’s in the current (system) clipboard before
;; replacing it with the Emacs’ text.
;; https://github.com/dakrone/eos/blob/master/eos.org
;; from http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/
(setq save-interprogram-paste-before-kill t)


#+END_SRC

#+RESULTS:
: t

** Helpful Custom Functions
*** Revert and Refresh Buffers

#+BEGIN_SRC emacs-lisp

  (global-auto-revert-mode 1) ;; you might not want this
  (setq auto-revert-verbose nil)
;; or this
  (global-set-key (kbd "<f5>") 'revert-buffer)


#+END_SRC


*** insert-current-file-name-at-point

From: http://mbork.pl/2019-02-17_Inserting_the_current_file_name_at_point




#+BEGIN_SRC emacs-lisp

(defun insert-current-file-name-at-point (&optional full-path)
  "Insert the current filename at point.
With prefix argument, use full path.

c-u M-o for full path
M-o for file name
"
  (interactive "P")
  (let* ((buffer
	  (if (minibufferp)
	      (window-buffer
	       (minibuffer-selected-window))
	    (current-buffer)))
	 (filename (buffer-file-name buffer)))
    (if filename
	(insert (if full-path filename (file-name-nondirectory filename)))
      (error (format "Buffer %s is not visiting a file" (buffer-name buffer))))))

(global-set-key (kbd "M-o") #'insert-current-file-name-at-point)


#+END_SRC

#+RESULTS:
: insert-current-file-name-at-point



*** Swap Slashes

#+BEGIN_SRC emacs-lisp

;;=============================================================================
;; 6. Swap Slashes
;; swap slashes and backslashes in current line -- useful for converting paths to be Windows-readable
;;http://www.xsteve.at/prg/emacs/.emacs.txt
(defun xsteve-exchange-slash-and-backslash ()
  "Exchanges / with \ and in the current line or in the region when a region-mark is active."
  (interactive)
  (save-match-data
    (save-excursion
      (let ((replace-count 0)
            (eol-pos (if mark-active (region-end) (progn (end-of-line) (point))))
            (bol-pos (if mark-active (region-beginning) (progn (beginning-of-line) (point)))))
        (goto-char bol-pos)
        (while (re-search-forward "/\\|\\\\" eol-pos t)
          (setq replace-count (+ replace-count 1))
          (cond ((string-equal (match-string 0) "/") (replace-match "\\\\" nil nil))
                ((string-equal (match-string 0) "\\") (replace-match "/" nil nil)))
          (message (format "%d changes made." replace-count)))))))

(global-set-key (kbd "M-\\") 'xsteve-exchange-slash-and-backslash)


#+END_SRC


*** Now and Today

#+BEGIN_SRC emacs-lisp

;; 7. now-today()
;; A couple of date and time functions:

(defvar current-date-time-format "%a %b %d %Y %H:%M:%S %Z"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%d %b %Y %H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

;;(defun insert-current-date-time ()
(defun today()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert "==========\n")
;       (insert (let () (comment-start)))
       (insert (format-time-string current-date-time-format (current-time)))
       (insert "\n")
       )

;;(defun insert-current-time ()
(defun now ()
  "insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert (format-time-string current-time-format (current-time)))
       (insert "\n")
       )

(global-set-key "\C-c\D" 'today)
(global-set-key "\C-c\T" 'now)


#+END_SRC


*** Compact-Uncompact Block

#+BEGIN_SRC emacs-lisp
;;==============================================================================
;;==============================================================================
;; 9.0  compact-uncompact-block

;; from: http://xahlee.blogspot.com/2010/05/emacs-unfill-paragraph-unfill-region.html
(defun compact-uncompact-block ()
  (interactive)
  ;; This command symbol has a property "stateIsCompact-p", the
  ;; possible values are t and nil. This property is used to easily
  ;; determine whether to compact or uncompact, when this command is
  ;; called again

  (let (bds currentLineCharCount currentStateIsCompact
            (bigFillColumnVal 4333999) (deactivate-mark nil))

    (save-excursion
      ;; currentLineCharCount is used to determine whether current state
      ;; is compact or not, when the command is run for the first time
      (setq currentLineCharCount
            (progn
              (setq bds (bounds-of-thing-at-point 'line))
              (length (buffer-substring-no-properties (car bds) (cdr bds)))
              ;; Note: line includes eol if it is not buffers last line
              )
            )

      ;; Determine whether the text is currently compact.  when the last
      ;; command is this, then symbol property easily tells, but when
      ;; this command is used fresh, right now we use num of chars of
      ;; the cursor line as a way to define current compatness state
      (setq currentStateIsCompact
            (if (eq last-command this-command)
                (get this-command 'stateIsCompact-p)
              (if (> currentLineCharCount fill-column) t nil)
              )
            )

      (if (and transient-mark-mode mark-active)
          (if currentStateIsCompact
              (fill-region (region-beginning) (region-end))
            (let ((fill-column bigFillColumnVal))
              (fill-region (region-beginning) (region-end)))
            )
        (if currentStateIsCompact
            (fill-paragraph nil)
          (let ((fill-column bigFillColumnVal))
            (fill-paragraph nil))
          )
        )

      (put this-command 'stateIsCompact-p
           (if currentStateIsCompact
               nil t)) ) ) )

(global-set-key (kbd "M-<f5>")  'compact-uncompact-block)


#+END_SRC




* File Management

** Dired

Hide dot files default in dired. Type '.' to toggle their visibility.
From [[https://github.com/mattiasb/dired-hide-dotfiles]]

#+begin_src emacs-lisp

    (use-package dired-hide-dotfiles
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
    (defun my-dired-mode-hook ()
      "My `dired' mode hook."
      ;; To hide dot-files by default
      (dired-hide-dotfiles-mode))

    ;; To toggle hiding
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
    (add-hook 'dired-mode-hook #'my-dired-mode-hook)
    )

#+end_src

#+RESULTS:
| my-dired-mode-hook | dired-hide-dotfiles-mode |




** Recent Files

#+BEGIN_SRC emacs-lisp

  ;;==============================================================================
  ;; from http://www.joegrossberg.com/archives/000182.html
  (use-package recentf
    :ensure t
    :config
    (recentf-mode 1)
    (setq recentf-max-menu-items 50)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)

    (setq recentf-exclude '("~/\\.emacs\\.d/elpa/"))
    (setq recentf-exclude '("~/\\.emacs\\.d/ido.last"))


    )

#+END_SRC

#+RESULTS:
: t


* Org-Mode and Org-Capture

~C-c c~ to activate org capture.

#+BEGIN_SRC emacs-lisp


  ;; set org-directory to value defined in init.el
  (setq org-directory my-org-dir)

  ;; Org Capture
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps t)

  (setq org-capture-templates
        `(
          ;;("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
          ("l" "Link" entry (file+headline ,(concat org-directory "links.org")  "Links")
           "* %^L %^G \n%T\n%? " :prepend t :empty-lines 1)
          ("b" "Blog idea" entry (file+headline ,(concat (file-name-as-directory org-directory) "notes.org") "Blog Topics:")
           "* %?\n%T" :prepend t :empty-lines 1)
          ("t" "To Do Item" entry (file+headline ,(concat (file-name-as-directory org-directory) "notes.org") "To Do and Notes")
           "* TODO %?\n%u" :prepend t :empty-lines 1)
          ("n" "Note" entry (file+headline ,(concat (file-name-as-directory org-directory) "notes.org") "Notes")
           "* %u %? " :prepend t :empty-lines 1)
          ("s" "Snippet" entry (file+headline ,(concat (file-name-as-directory org-directory) "Snippets.org") "Snippets:")
           "*  %^G \n%T\n\n%?" :prepend t :empty-lines 1)

          ("p" "Project Templates")
          ("pn" "New Project" entry (file (lambda() (concat  (file-name-as-directory org-directory) "Projects.org")) )
           (file "templates/NewProject.org") :prepend t :empty-lines 1)
          ("pu" "Project Update" entry (file+headline (lambda() (concat  (file-name-as-directory org-directory) "Projects.org")) "Updates")
           (file "templates/ProjectRequestUpdate.org") :prepend t :empty-lines 1)

          ("r" "Data Request Templates")
          ("rn" "New Data Request" entry (file (lambda() (concat  (file-name-as-directory org-directory) "DataRequests.org")) )
           (file "templates/NewDataRequest.org") :prepend t :empty-lines 1)
          ("ru" "Request Update" entry (file+headline (lambda() (concat  (file-name-as-directory org-directory) "DataRequests.org")) "Updates")
           (file "templates/ProjectRequestUpdate.org") :prepend t :empty-lines 1)

          ))



  ;;=============================================================================
  ;; some org customization from: http://www.tychoish.com/2009/02/org-mode-snippets/

  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (add-hook 'org-mode-hook 'flyspell-mode)


  ;; added 18 Apr 2012 "C-c|" behaviour has been usurped by a reftex
  ;; command (reftex-index-visit-phrases-buffer)) - change orgmode table
  ;; behaviour to C-ct
  (add-hook 'org-mode-hook
            (lambda ()
              (define-key org-mode-map "\C-ct" 'org-table-convert-region)))


#+END_SRC

#+RESULTS:
| er/add-org-mode-expansions | #[0 \300\301\302\303\304$\207 [add-hook before-save-hook org-encrypt-entries nil t] 5] | (lambda nil (define-key org-mode-map t (quote org-table-convert-region))) | flyspell-mode | turn-on-auto-fill | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** reveal.js

Modified from : https://cestlaz.github.io/posts/using-emacs-11-reveal/
to use org-re-reveal

#+BEGIN_SRC emacs-lisp
  (use-package org-re-reveal
    :ensure org-re-reveal)

  ;; path could be to a local copy
  (setq org-re-reveal-root "https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0/")
(setq org-re-reveal-revealjs-version "3")
  ;;(setq org-re-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-re-reveal-mathjax t)

  (use-package htmlize
    :ensure t)

#+END_SRC

** org-crypt

#+BEGIN_SRC emacs-lisp

  ;;==============================================================================
  ;;(require 'org-crypt)
  ;;(org-crypt-use-before-save-magic)
  ;;(setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ;;;; GPG key to use for encryption
  ;;;; Either the Key ID or set to nil to use symmetric encryption.
  ;;(setq org-crypt-key nil)
  ;;

;;  (custom-set-variables '(epg-gpg-program  "C:/gnu/emacs/GnuPG/gpg.exe"))


  (use-package org-crypt
    :config
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
    ;; GPG key to use for encryption
    ;; Either the Key ID or set to nil to use symmetric encryption.
    (setq org-crypt-key nil)

    )


#+END_SRC

#+RESULTS:
: t


* Org-roam

  #+begin_src emacs-lisp

    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Documents/MyOrgFiles/org_roam/org_roam")

      (org-roam-complete-everywhere t)

      (org-roam-capture-templates
       '(("d" "default" plain "%?"
          :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n#+date: %U\n")
          :unnarrowed t)

         ("l" "progamming language" plain
          "* Characteristics\n\n- Family:*%?\n- Inspired By: \n\n* Reference:\n\n"
          :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n")
          :unnarrowed t)

         ("b" "book" plain
          (file "~/Documents/MyOrgFiles/org_roam/templates/bookTemplate.org")
          :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n")
          :unnarrowed t)

         ("p" "project" plain
          "\n* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
          :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n#+filetags: ${project}")
          :unnarrowed t)

         ))

      (setq org-roam-dailies-directory (concat org-roam-director "daily/"))
      (setq org-roam-dailies-capture-templates
            '(
              ("d" "default" entry  "* %<%I:%M %p>: %?"
               :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
               )
              ))


      :bind (
             ("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n c" . org-roam-capture)
             ("C-c n i" . org-roam-node-insert)
             ("C-M-i" . completion-at-point)
             ("C-c n d" . org-roam-dailies-map)
             (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))
             )
      :config

      (require 'org-roam-protocol)
      (org-roam-setup))


  #+end_src

  #+RESULTS:
  : org-roam-buffer-toggle

** Winner Mode

- provides browser like history for buffers.  i.e. - backwards and forward.

#+begin_src emacs-lisp
     (winner-mode +1)
(define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
(define-key winner-mode-map (kbd "<M-right>") #'winner-redo)
#+end_src

#+RESULTS:
: winner-redo


* Vertico and orderless

  + [[https://github.com/minad/vertico][Vertico]] is a completion library similar to ivy
  + [[https://github.com/oantolin/orderless][Orderless]] is a more advance completion interface that filters
    results by multiple matches separated by spaces

#+begin_src emacs-lisp

  ;; from https:\\github.com\minad\vertico
    ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    :bind
  (
   ("C-x f" . find-file)

    )
  )

  ;; Use the `orderless' completion style. Additionally enable
  ;; `partial-completion' for file path expansion. `partial-completion' is
  ;; important for wildcard support. Multiple files can be opened at once
  ;; with `find-file' if you enter a wildcard. You may also give the
  ;; `initials' completion style a try.
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


#+end_src

#+RESULTS:



* Consult

[[https://github.com/minad/consult][Consult]] provides practical commands based on the Emacs completion
function completing-read. Completion allows you to quickly select an
item from a list of candidates. Consult offers in particular an
advanced buffer switching command consult-buffer to switch between
buffers and recently opened files. Furthermore Consult provides
multiple search commands, an asynchronous consult-grep and
consult-ripgrep, and consult-line, which resembles Swiper.

  #+begin_src emacs-lisp

        (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
             ("C-c h" . consult-history)
             ("C-c m" . consult-mode-command)
             ("C-c b" . consult-bookmark)
             ("C-c k" . consult-kmacro)
             ;; C-x bindings (ctl-x-map)
             ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
             ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
             ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
             ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
             ;; Custom M-# bindings for fast register access
             ("M-#" . consult-register-load)
             ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
             ("C-M-#" . consult-register)
             ;; Other custom bindings
             ("M-y" . consult-yank-pop)                ;; orig. yank-pop
             ("<help> a" . consult-apropos)            ;; orig. apropos-command
             ;; M-g bindings (goto-map)
             ("M-g e" . consult-compile-error)
             ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
             ("M-g g" . consult-goto-line)             ;; orig. goto-line
             ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
             ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
             ("M-g m" . consult-mark)
             ("M-g k" . consult-global-mark)
             ("M-g i" . consult-imenu)
             ("M-g I" . consult-imenu-multi)
             ;; M-s bindings (search-map)
             ("M-s f" . consult-find)
             ("M-s F" . consult-locate)
             ("M-s g" . consult-grep)
             ("M-s G" . consult-git-grep)
             ("M-s r" . consult-ripgrep)
             ;;("M-s l" . consult-line)
             ;;("M-s L" . consult-line-multi)
             ("C-s" . consult-line)
             ("C-S-s" . consult-line-multi)
             ("M-s m" . consult-multi-occur)
             ("M-s k" . consult-keep-lines)
             ("M-s u" . consult-focus-lines)
             ;; Isearch integration
             ("M-s e" . consult-isearch)
             :map isearch-mode-map
             ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
             ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
             ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
             ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

      ;; Enable automatic preview at point in the *Completions* buffer.
      ;; This is relevant when you use the default completion UI,
      ;; and not necessary for Vertico, Selectrum, etc.
      :hook (completion-list-mode . consult-preview-at-point-mode)

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Optionally replace `completing-read-multiple' with an enhanced version.
      (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-."))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-theme
       :preview-key '(:debounce 0.2 any)
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-file consult--source-project-file consult--source-bookmark
       :preview-key (kbd "M-."))

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; Optionally configure a function which returns the project root directory.
      ;; There are multiple reasonable alternatives to chose from.
      ;;;; 1. project.el (project-roots)
      (setq consult-project-root-function
            (lambda ()
              (when-let (project (project-current))
                (car (project-roots project)))))
      ;;;; 2. projectile.el (projectile-project-root)
      ;; (autoload 'projectile-project-root "projectile")
      ;; (setq consult-project-root-function #'projectile-project-root)
      ;;;; 3. vc.el (vc-root-dir)
      ;; (setq consult-project-root-function #'vc-root-dir)
      ;;;; 4. locate-dominating-file
      ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    )

    ;; from: https://systemcrafters.cc/live-streams/may-21-2021/
    (defun get-project-root ()
      (when (fboundp 'projectile-project-root)
        (projectile-project-root)))

  #+end_src

  #+RESULTS:
  : get-project-root


* Marginalia

  [[https://github.com/minad/marginalia][Marginalia]] provides marginalia-mode which adds marginalia to the
  minibuffer completions. Marginalia are marks or annotations placed
  at the margin of the page of a book or in this case helpful colorful
  annotations placed at the margin of the minibuffer for your
  completion candidates. Marginalia can only add annotations to be
  displayed with the completion candidates. It cannot modify the
  appearance of the candidates themselves, which are shown as supplied
  by the original commands.

  #+begin_src emacs-lisp

    ;; Enable richer annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))


  #+end_src

  #+RESULTS:
  : marginalia-cycle


* Embark

Embark provides additional, context specific functionality to
selections in the mini-buffer.  If a file is select, =embark-act= will
provide options to copy, delete, open move, ect.  If the mini-buffer
contains a function process such as =consult-ripgrep=, =embark-act=
will provide option that are specific to functions (option 'i') was
selected to insert those function names in this paragraph.  The
functionality of embark is similar in many ways to some of the
functionality provided by ivy in the mini-buffer.

#+begin_src emacs-lisp
   (use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

#+RESULTS:
| consult-preview-at-point-mode |

* Ivy, Councel, and Swiper

;;** Counsel
;;
;;#+BEGIN_SRC emacs-lisp
;;
;;(use-package counsel
;;  :bind
;;  (("M-y" . counsel-yank-pop)
;;   :map ivy-minibuffer-map
;;   ("M-y" . ivy-next-line)))
;;
;;#+END_SRC
;;
;;#+RESULTS:
;;: ivy-next-line
;;
;;** Swiper
;;
;;#+BEGIN_SRC emacs-lisp
;;
;;;;Counsel
;;(use-package ivy
;;  :ensure t
;;  )
;;
;;
;;;;Counsel
;;(use-package counsel
;;  :ensure t
;;  )
;;
;;;;Swiper
;;(use-package swiper
;;  :ensure t
;;  :config
;;  (progn
;;    (ivy-mode 1)
;;    (setq ivy-use-virtual-buffers t)
;;    (setq enable-recursive-minibuffers t)
;;    (global-set-key "\C-s" 'swiper)
;;    (global-set-key (kbd "C-c C-r") 'ivy-resume)
;;    (global-set-key (kbd "<f6>") 'ivy-resume)
;;    (global-set-key (kbd "M-x") 'counsel-M-x)
;;    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;;    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;;    (global-set-key (kbd "<f1> l") 'counsel-find-library)
;;    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;;    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;;    (global-set-key (kbd "C-c g") 'counsel-git)
;;    (global-set-key (kbd "C-c j") 'counsel-git-grep)
;;    (global-set-key (kbd "C-c k") 'counsel-ag)
;;    (global-set-key (kbd "C-x l") 'counsel-locate)
;;    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;;    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)       ))
;;
;;
;;#+END_SRC
;;
;;#+RESULTS:
;;: t
;;
;;
;;
;;** Ivy Rich
;;
;;
;;  #+begin_src emacs-lisp
;;(use-package ivy-rich
;;  :init
;;  (ivy-rich-mode 1))
;;
;;(use-package counsel
;;  :bind (("C-M-j" . 'counsel-switch-buffer)
;;         :map minibuffer-local-map
;;         ("C-r" . 'counsel-minibuffer-history))
;;  :custom
;;  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
;;  :config
;;  (counsel-mode 1))
;;
;;  #+end_src
;;
;;  #+RESULTS:
;;  : counsel-minibuffer-history
;;
;;
;;** Helpful
;;
;; #+begin_src emacs-lisp
;;
;;   (use-package helpful
;;     :ensure t
;;     :custom
;;     (counsel-describe-function-function #'helpful-callable)
;;     (counsel-describe-variable-function #'helpful-variable)
;;     :bind
;;     ([remap describe-function] . counsel-describe-function)
;;     ([remap describe-command] . helpful-command)
;;     ([remap describe-variable] . counsel-describe-variable)
;;     ([remap describe-key] . helpful-key))
;; #+end_src
;;
;; #+RESULTS:
;; : helpful-key
;;


* Appearance
** Themes

#+BEGIN_SRC emacs-lisp

    ;;=====================================
    ;; color themes
    ;;(load-theme 'wombat)
    ;;(load-theme 'tsdh-dark)
    ;;(load-theme 'leuven)
    ;; alternatively - use custom theme:
    ;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
    ;;(load-theme 'zenburn t)
    (load-theme 'monokai t)
    ;;(load-theme 'whiteboard t)
    ;;(load-theme 'misterioso t)
    ;;(load-theme 'anti-zenburn t)
    ;;(load-theme 'soft-morning t)
    ;;(load-theme 'soft-charcoal t)
    ;;(load-theme 'obsidian t)


#+END_SRC

#+RESULTS:
: t

** beacon

Beacon makes the cursor blink or pulse briefly each time a new buffer
is selected and make it much easier to find your cursor quickly.

#+BEGIN_SRC emacs-lisp

  (use-package beacon
    :ensure t
    ;;:defer 1
    :config (beacon-mode 1)
    )

#+END_SRC

#+RESULTS:
: t



** Parenthesis Matching

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

 #+end_src


#+BEGIN_SRC emacs-lisp
  ;;==============================================================================
;;  ;; 8. Parenthesis highlighting
;;  (use-package highlight-parentheses
;;    :ensure t
;;    :config
;;    (setq hl-paren-colors '("DodgerBlue1" "IndianRed" "cyan" "ForestGreen" "magenta" "SlateGrey"))
;;    (defun hpm-on ()
;;      (highlight-parentheses-mode t))
;;
;;    (add-hook 'admb-mode-hook 'hpm-on)
;;    (add-hook 'ess-mode-hook 'hpm-on)
;;    (add-hook 'python-mode-hook 'hpm-on)
;;    (add-hook 'latex-mode-hook 'hpm-on)
;;    (add-hook 'LaTeX-mode-hook 'hpm-on)
;;    (add-hook 'inferior-ess-mode-hook 'hpm-on)
;;    (add-hook 'lisp-mode-hook 'hpm-on)
;;    )
;;
#+END_SRC


** Smartparens

#+BEGIN_SRC emacs-lisp

  (use-package smartparens
    ;;:ensure t
    :config
    (use-package smartparens-config)
    (use-package smartparens-python)

    (smartparens-global-mode t)
    (smartparens-strict-mode t)
    (show-smartparens-global-mode t)
   )
#+END_SRC

#+RESULTS:
: t





* Navigation

#+BEGIN_SRC emacs-lisp

  ;; move between windows with shift+ arrow keys
  (windmove-default-keybindings)

  ;; ;; Ace Window
  ;; ;; C-o then the number corresponding to window to jump to.
  ;; (use-package ace-window
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     (global-set-key [remap other-window] 'ace-window)
  ;;     (custom-set-faces
  ;;      '(aw-leading-char-face
  ;;        ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ;;     ))


#+END_SRC

** Dumb-jump

from [[https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/]]

Dump jump provides lsp like project navigation without the set up.  It
used regular expression and ag/grep/ripgrep to find matches.

Use ~C-M-g~ to 'go' to the definition of a function under the point  and ~C-M=p~ to return to where
you where.

~M-g o~ can be used to open the function definition in another window.


#+BEGIN_SRC emacs-lisp

  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config
    (setq dumb-jump-selector 'ivy)
    ;; (setq dumb-jump-selector 'helm)

    :init
    (dumb-jump-mode)
    :ensure t
    )

#+END_SRC

#+RESULTS:
: dumb-jump-go-prefer-external-other-window







* Editing
** iedit

iedit provides alight weight multiple cursor functionality in emacs.  See
[[https://github.com/victorhge/iedit]]


Mike Zamansky posted a video its use here:
[[https://www.youtube.com/watch?v=xne0kS1DfVs&t=4s]]

Use in conjunction with expand region.

#+BEGIN_SRC emacs-lisp

(use-package iedit
:ensure t
)

#+END_SRC

** Expand Region

from [[https://cestlaz.github.io/posts/using-emacs-17-misc/]]

~~C-=~ to expand selected region recursively
~~C-- C-=~ to reduce selected region


#+BEGIN_SRC emacs-lisp

; expand the marked region in semantic increments (negative prefix to reduce region)
(use-package expand-region
:ensure t
:config
(global-set-key (kbd "C-=") 'er/expand-region))

#+END_SRC


** ws-butler

ws-butler is little utility package that trims extraneous trailing
whitespaces from any line you are one.  Set-it and forget-it.

#+BEGIN_SRC emacs-lisp

  (use-package ws-butler
    :ensure t
    :config
    (ws-butler-global-mode t)
    )

#+END_SRC

#+RESULTS:
: t


** Company Mode

#+begin_src emacs-lisp
        (use-package comany
          :defer t
          :init
          (add-hook 'after-init-hook 'global-company-mode))
#+end_src

#+RESULTS:
| global-company-mode | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |


* Try

- try is a little packages that lets us evaluate a package without
  permanently installing them.

#+BEGIN_SRC emacs-lisp

  (use-package try
  :ensure t)

#+END_SRC


* Which-key

- which-key is a package that provides all of the available
  completions.
- type ~C-x~
- after one second, all of the possible completions are presented in
  the mini-buffer.

- in most cases, you need know the first key stroke to get which-key
  to show the remaining matches in the buffer. the function
  ~which-key-show-toplevel~ can be called from the mini-buffer to show
  all of the available key binding in a buffer without needing to know
  the first key stroke or two.


#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    )

#+END_SRC

#+RESULTS:
: t


* IDO and iBuffer

+ ibuffer groups from Mike Zimansky's blog post and video here:
[[https://cestlaz.github.io/posts/using-emacs-34-ibuffer-emmet/]]

#+BEGIN_SRC emacs-lisp


    ;; ido
  (use-package ido
  :config


    ;;(require 'ido)
    (ido-mode t)
    (setq ido-everywhere t)
    (setq ido-enable-flex-matching t) ;; enable fuzzy matching
    ;; don't bother to show files with these extenstions - would't open them in emacs anyway.
    (setq completion-ignored-extensions
      '("package-lock.json" ".pyc" ".pptx" ".docx" ".xlsx" ".ppt" ".doc" ".xls" ".mdb" ".accdb" ".elc" "~"))


    (defalias 'list-buffers 'ibuffer-other-window)

    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))
                   ("web" (or (mode . web-mode) (mode . js2-mode)))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("mu4e" (name . "\*mu4e\*"))
                   ("programming" (or
                                   (mode . python-mode)
                                   ;;(mode . elpy-mode)
                                   (mode . ess-mode)
                                   (mode . c++-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; Don't show filter groups if there are no buffers in that group
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Don't ask for confirmation to delete marked buffers
    (setq ibuffer-expert t)
)


#+END_SRC

#+RESULTS:
: t

* Development



** Projectile

From: [[https://cestlaz.github.io/posts/using-emacs-33-projectile-jump/]]

#+BEGIN_SRC emacs-lisp

  ;; projectile
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)

    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1)

    (setq projectile-sort-order 'recentf)
    (setq projectile-switch-project-action #'projectile-dired)
    (setq projectile-completion-system 'ivy))
    (setq projectile-globally-ignored-file-suffixes '("pyc"))
    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode))



#+END_SRC

#+RESULTS:
: t


** Magit

#+BEGIN_SRC emacs-lisp

  ;; 10. Git

  ;; (use-package magit
  ;;   :ensure t
  ;;   :config
  ;;   ;; use Ctrl-C G to start Git:
  ;;   (global-set-key "\C-c\C-g" 'magit-status)
  ;;   )

;;(require 'dash)
(use-package magit
  ;; :ensure t
  :bind ("C-c C-g" . magit-status)
  ;;:config
  )




#+END_SRC

#+RESULTS:
: magit-status

** Auto-complete

#+BEGIN_SRC emacs-lisp

  ;; Autocomplete
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (progn
  ;;     ;;(ac-config-default)
  ;;     ;;(global-auto-complete-mode t)

  ;;     (add-to-list 'load-path "~/.emacs.d/lisp/")
  ;;     ;;(require 'auto-complete-config)
  ;;     (add-to-list 'ac-dictionary-directories "~/.emacs.d/lisp/ac-dict")
  ;;     ;;(add-to-list 'ac-modes 'js3-mode)
  ;;     (ac-config-default)


  ;;     ))





#+END_SRC

#+RESULTS:




** YASnippet

#+BEGIN_SRC emacs-lisp

        (use-package yasnippet
        :defer t
        :config
        (use-package warnings
          :ensure t
          )

        (yas-global-mode t)
        (add-to-list 'warning-suppress-types '(yasnippet backquote-change))
      )


#+END_SRC

#+RESULTS:
: t


** Flycheck

#+BEGIN_SRC emacs-lisp

    ;;(require 'flycheck)
    (use-package flycheck
    :ensure t
    :defer t
    :custom
    (flycheck-python-flake8-executable "flake8")
    )
#+END_SRC


** LSP-mode

#+begin_src emacs-lisp

    (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
    (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
(setq lsp-idle-delay 0.500)
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             (python-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :commands lsp-ui-mode)
    ;; if you are helm user
    ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
    ;; if you are ivy user
    ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
    ;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

    ;; optionally if you want to use debugger
    ;;(use-package dap-mode)
    ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

    ;; optional if you want which-key integration
    (use-package which-key
        :config
        (which-key-mode))

#+end_src

#+RESULTS:
: t


** Python


#+BEGIN_SRC emacs-lisp


  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp))))



         (add-hook 'python-mode-hook 'whitespace-mode)
         (add-hook 'python-mode-hook 'blacken-mode)

            (setq-default whitespace-line-column 80)
            (setq-default whitespace-style '(face lines-tail))
            (whitespace-mode 0)
            (defun my-toggle-longline-indicator ()
              "Highlights chars over 80 columns"
              (interactive)
              (if (eq whitespace-mode t)
                  (whitespace-mode 0)
                (whitespace-mode t)))


           ;; Use Flycheck instead of Flymake
           (when (require 'flycheck nil t)
             (remove-hook 'elpy-modules 'elpy-module-flymake)
             (add-hook 'elpy-mode-hook 'flycheck-mode)
           )



#+END_SRC

#+RESULTS:

*** VirtualenvWrapper

pyvenv ships with elpy, but does not seem to activate or deactivate
custom global values created in venv activate scripts.

Note: this is a total hack - virtualenvwrapper does not appear to be
available on melpa this morning:

#+BEGIN_SRC emacs-lisp

  (use-package virtualenvwrapper
    :ensure t
    :config
    ;; interactive shell support
    (venv-initialize-interactive-shells)
    ;; eshell support
    (venv-initialize-eshell)

    (defalias 'workon 'venv-workon)
    (defalias 'deactivate 'venv-deactivate)

    )

#+END_SRC

#+RESULTS:
: t


** Javascript


#+BEGIN_SRC emacs-lisp

      ;;================
      ;; Javascript

    (use-package js2-mode
      :commands js2-mode
      :init
      (progn
        (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
        ;;(setq-default js2-basic-offset 2)
        (add-to-list 'interpreter-mode-alist (cons "node" 'js2-mode)))
      :config
      (progn
        (js2-imenu-extras-setup)
        (bind-key "C-x C-e" 'js-send-last-sexp js2-mode-map)
        (bind-key "C-M-x" 'js-send-last-sexp-and-go js2-mode-map)
        (bind-key "C-c b" 'js-send-buffer js2-mode-map)
        (bind-key "C-c d" 'my/insert-or-flush-debug js2-mode-map)
        (bind-key "C-c C-b" 'js-send-buffer-and-go js2-mode-map)
        (bind-key "C-c w" 'my/copy-javascript-region-or-buffer js2-mode-map))


        ;; from https://emacs.cafe/emacs/javascript/setup/2017/05/09/emacs-setup-javascript-2.html
        ;;(require 'company)
        ;;(require 'company-tern)

        ;; (add-to-list 'company-backends 'company-tern)
        ;; (add-hook 'js2-mode-hook (lambda ()
        ;;                          (tern-mode)
        ;;                          (company-mode)))


  )


      ;; (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
      ;; ;;(add-hook 'js-mode-hook 'js2-minor-mode)
      ;; ;; (add-hook 'js2-mode-hook 'ac-js2-mode)

      ;; (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))

      ;; ;; Better imenu
      ;; (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

      ;; (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))

      ;; ;;;; use moz-repl to work interactively with mozilla browser
      ;; ;;(autoload 'moz-minor-mode
      ;; ;;  "moz"
      ;; ;;  "Mozilla Minor and Inferior Mozilla Modes" t)
      ;; ;;(add-hook 'js2-mode-hook 'js2-custom-setup)
      ;; ;;(defun js2-custom-setup ()
      ;; ;;  (moz-minor-mode 1))

      ;; ;;(custom-set-variables
      ;;   ;; Your init file should contain only one such instance.
      ;;   ;; If there is more than one, they won't work right.
      ;; ;; '(js3-indent-dots t))

      ;; (require 'eval-in-repl)
      ;; ;;; Javascript support
      ;; ;; (require 'js3-mode)  ; if not done elsewhere
      ;; (require 'js2-mode)  ; if not done elsewhere
      ;; (require 'js-comint) ; if not done elsewhere
      ;; ;;(with-eval-after-load 'js3-mode
      ;; ;;  (require 'eval-in-repl-javascript)
      ;; ;;  (define-key js3-mode-map (kbd "<C-return>") 'eir-eval-in-javascript))
      ;; (with-eval-after-load 'js2-mode
      ;;   (require 'eval-in-repl-javascript)
      ;;   (define-key js2-mode-map (kbd "<C-return>") 'eir-eval-in-javascript))

      ;; (setq inferior-js-program-command "node")


      ;; ;;(require 'json)

      ;; (use-package json
      ;; :ensure t
      ;; )


      ;; (add-hook 'after-init-hook #'global-flycheck-mode)

      ;; (defun my-parse-jslinter-warning (warning)
      ;;   (flycheck-error-new
      ;;    :line (1+ (cdr (assoc 'line warning)))
      ;;    :column (1+ (cdr (assoc 'column warning)))
      ;;    :message (cdr (assoc 'message warning))
      ;;    :level 'error
      ;;    :buffer (current-buffer)
      ;;    :checker 'javascript-eslint
      ;;    ;;:checker 'javascript-jslinter
      ;;    ))
      ;; (defun jslinter-error-parser (output checker buffer)
      ;;   (mapcar 'parse-jslinter-warning
      ;;           (cdr (assoc 'warnings (aref (json-read-from-string output) 0)))))
      ;; (flycheck-define-checker javascript-jslinter
      ;;   "A JavaScript syntax and style checker based on JSLinter.

      ;; See URL `https://github.com/tensor5/JSLinter'."
      ;;   :command ("/usr/local/bin/jslint" "--raw" source)
      ;;   :error-parser jslinter-error-parser
      ;;   :modes (js-mode js2-mode))
      ;;   ;;:modes (js-mode js2-mode js3-mode))

      ;; ;; from https://stackoverflow.com/questions/48733723
      ;; (defun js2-mode-use-eslint-indent ()
      ;;   (let ((json-object-type 'hash-table)
      ;;     (json-config (shell-command-to-string (format  "eslint --print-config %s"
      ;;                                (shell-quote-argument
      ;;                             (buffer-file-name))))))
      ;;     (ignore-errors
      ;;       (setq js-indent-level
      ;;         (aref (gethash "indent" (gethash  "rules" (json-read-from-string json-config))) 1)))))

      ;; (add-hook 'js2-mode-hook #'js2-mode-use-eslint-indent)



      ;; (eval-after-load 'tern
      ;;    '(progn
      ;;       (require 'tern-auto-complete)
      ;;       (tern-ac-setup)))
      ;; (add-hook 'js2-mode-hook 'tern-ac-setup)




      (require 'js2-refactor)
      ;;(require 'xref-js2)

      (add-hook 'js2-mode-hook #'js2-refactor-mode)
      (js2r-add-keybindings-with-prefix "C-c C-r")
      ;;(define-key js2-mode-map (kbd "C-k") #'js2r-kill)

      ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
      ;; unbind it.
      (define-key js-mode-map (kbd "M-.") nil)

      ;;(add-hook 'js2-mode-hook (lambda ()
      ;;  (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))



      ;; Disable completion keybindings, as we use xref-js2 instead
      ;;(define-key tern-mode-keymap (kbd "M-.") nil)
      ;;(define-key tern-mode-keymap (kbd "M-,") nil)



      ;; Tide - Typescript mode

      (require 'typescript-mode)
      (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))


      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save mode-enabled))
        (eldoc-mode +1)
        (tide-hl-identifier-mode +1)
        ;; company is an optional dependency. You have to
        ;; install it separately via package-install
        ;; `M-x package-install [ret] company`
        (company-mode +1))

      ;; aligns annotation to the right hand side
      (setq company-tooltip-align-annotations t)

      ;; formats the buffer before saving
      ;;(add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode)




#+END_SRC

#+RESULTS:
| tide-hl-identifier-mode | tide-setup | prettier-js-mode | setup-tide-mode |


*** Prettier-js

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'prettier-js)
(add-hook 'js2-mode-hook 'prettier-js-mode)
;;(add-hook 'web-mode-hook 'prettier-js-mode)
#+END_SRC

#+RESULTS:
| prettier-js-mode | js2-refactor-mode | er/add-js2-mode-expansions | er/add-js-mode-expansions |


*** React Jsx

#+BEGIN_SRC emacs-lisp


   (use-package rjsx-mode
     :ensure t
     :mode ("/\\(components\\|containers\\|src\\)/.*\\.js[x]?\\'" . rjsx-mode)
     :config
     (require 'react-snippets)
     (add-hook 'rjsx-mode-hook 'emmet-mode)
     (require 'flycheck)
     (add-hook 'rjsx-mode-hook 'flycheck-mode)
     ;; use eslint with rjsx-mode for jsx files
     (flycheck-add-mode 'javascript-eslint 'rjsx-mode)

     )



  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; formats the buffer before saving
  ;;(add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode)



  (use-package tide
    :ensure t
    :after (typescript-mode company flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           ;;(before-save . tide-format-before-save)
   )
  )

  ;;(eval-after-load "tide"
  ;;  '(define-key tide-mode-map [F1] 'tide-documentation-at-point))



  ;; from tide homepage - use tide in  tsx and jsx files
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)


  (require 'web-mode)
  ;;(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
            (prettier-js-mode)
              (when (string-equal "jsx" (file-name-extension buffer-file-name))
              (setq emmet-expand-jsx-className? t) ;; default nil
              (web-mode-set-content-type "jsx")
                (setup-tide-mode))


  ))



  ;; configure jsx-tide checker to run after your default jsx checker
  (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(tsx-tide)))
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;;(flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)

#+END_SRC

#+RESULTS:
| web-mode | js-mode | js-jsx-mode | js2-mode | js2-jsx-mode | js3-mode | rjsx-mode | typescript-mode |



** HTML and Web-mode

Web-mode configuration modified using suggestions found here:
[[https://cestlaz.github.io/posts/using-emacs-21-web-mode/]]


#+BEGIN_SRC emacs-lisp


  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
    )

  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t)
    (setq web-mode-enable-current-element-highlight t)
    (setq web-mode-enable-current-column-highlight t)

    )

#+END_SRC

#+RESULTS:
: t


** YAML

#+BEGIN_SRC emacs-lisp

(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

#+END_SRC

#+RESULTS:
: ((\.yml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.dat$ . perl-mode) (\.tpl$ . admb-mode) (\.rd\' . Rd-mode) (.md . markdown-mode) (.markdown . markdown-mode) (.text . markdown-mode) (README\.md\' . gfm-mode) (\.html?\' . web-mode) (\.ts\' . typescript-mode) (\.js$ . js2-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.ado\' . ess-stata-mode) (\.do\' . ess-stata-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION$ . conf-colon-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.js$ . js3-mode) (\.jl\' . julia-mode) (/git-rebase-todo\' . git-rebase-mode) (\.cpp[rR]\' . poly-c++r-mode) (\.[Rr]cpp\' . poly-r+c++-mode) (\.[rR]brew\' . poly-brew+r-mode) (\.[rR]html\' . poly-html+r-mode) (\.rapport\' . poly-rapport-mode) (\.[rR]md\' . poly-markdown+r-mode) (\.[rR]nw\' . poly-noweb+r-mode) (\.Snw\' . poly-noweb+r-mode) (\.md\' . poly-markdown-mode) (\.md\' . markdown-mode) (\.markdown\' . markdown-mode) (\.nw\' . poly-noweb-mode) (\.ts$ . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))


** Markdown

#+BEGIN_SRC emacs-lisp

  ;;=====================================
  ;;   markdown
  ;;   "Major mode for editing Markdown files" t)
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)
           (".text" . markdown-mode)
           (".markdown" . markdown-mode)
           (".md" . markdown-mode))

    :init (setq markdown-command "multimarkdown")
    )


#+END_SRC

#+RESULTS:
: ((.md . markdown-mode) (.markdown . markdown-mode) (.text . markdown-mode) (README\.md\' . gfm-mode) (\.md . poly-markdown-mode) (\.cpp[rR]$ . poly-c++r-mode) (\.[Rr]cpp$ . poly-r+c++-mode) (\.[rR]brew$ . poly-brew+r-mode) (\.[rR]html$ . poly-html+r-mode) (\.rapport$ . poly-rapport-mode) (\.[rR]md$ . poly-markdown+r-mode) (\.[rR]nw$ . poly-noweb+r-mode) (\.Snw$ . poly-noweb+r-mode) (\.nw$ . poly-noweb-mode) (\.html?\' . web-mode) (\.ts\' . typescript-mode) (\.json$ . js-mode) (\.js\' . js2-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.ado\' . ess-stata-mode) (\.do\' . ess-stata-mode) (\.[Ss][Aa][Ss]\' . SAS-mode) (\.Sout . S-transcript-mode) (\.[Ss]t\' . S-transcript-mode) (\.Rd\' . Rd-mode) (DESCRIPTION$ . conf-colon-mode) (/Makevars\(\.win\)?$ . makefile-mode) (\.[Rr]out . ess-r-transcript-mode) (CITATION\' . ess-r-mode) (NAMESPACE\' . ess-r-mode) (\.[rR]profile\' . ess-r-mode) (\.[rR]\' . ess-r-mode) (/R/.*\.q\' . ess-r-mode) (\.[Jj][Aa][Gg]\' . ess-jags-mode) (\.[Bb][Mm][Dd]\' . ess-bugs-mode) (\.[Bb][Oo][Gg]\' . ess-bugs-mode) (\.[Bb][Uu][Gg]\' . ess-bugs-mode) (\.js$ . js3-mode) (\.jl\' . julia-mode) (/git-rebase-todo\' . git-rebase-mode) (\.md$ . poly-markdown-mode) (\.md\' . markdown-mode) (\.markdown\' . markdown-mode) (\.ts$ . typescript-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))
